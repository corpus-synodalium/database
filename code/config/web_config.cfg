# -*- coding: utf-8 -*-"
####################################################
#### Web configuration options for PhiloLogic4 #####
####################################################
### All variables must be in valid Python syntax ###
####################################################


# The dbname variable is the title name in the HTML header
dbname = 'Corpus Synodalium'

# The global_config_location variable points to the global config file for philologic instances.
# Point to a different location if you intend to have several global config options for databases on a single server
global_config_location = '/etc/philologic/philologic4.cfg'

# Configure access control with True or False.
# Note that if you want access control, you have to provide a login.txt file inside your /data directory,
# otherwise access will remain open.
access_control = False

# Location of access file which contains authorized/unauthorized IPs and domain names
access_file = ''

# Do not set to False unless you want to make changes in the Web Client in the app/ directory
production = True

# If set, link_to_home_page should be a string starting with "http://" pointing to a separate home page for the database
link_to_home_page = ''

# The search_reports variable sets which search report is viewable in the search form
# Available reports are concordance, kwic, collocation, and time_series
search_reports = [
    'concordance',
    'kwic',
    'collocation',
    'time_series'
]

# The metadata variable sets which metadata field is viewable in the search form
metadata = [
    'record_id',
    'origPlace',
    'diocese',
    'province',
    'country',
    'language',
    'year',
    'head',
    'classification'
]

# The metadata_aliases variable allows to display a metadata variable under a different name in the HTML
# For example, you could rename the who metadata to Speaker, and the create_date variable to Date like so:
# metadata_aliases = {'who': 'Speaker', 'create_date', 'Date'}
metadata_aliases = {'record_id': 'Record ID', 'title': 'Title', 'language': 'Language', 'country': 'Modern Country', 'diocese': 'Diocese', 'province': 'Province', 'year': 'Year', 'create_date': 'Date', 'origPlace': 'Origin Place', 'classification': 'Classification', 'head': 'Header'}

# The metadata_input_style variable defines whether to use an text input field or a dropdown menu for any given
# metadata field. All fields are set by default to text. If using a dropdown menu, you need to set it to "dropdown"
# and populate the metadata_dropdown_values variable
metadata_input_style = {
    'province': 'text',
    'head': 'text',
    'create_date': 'text',
    'language': 'dropdown',
    'diocese': 'text',
    'country': 'dropdown',
    'origDate': 'text',
    'filename': 'text',
    'origPlace': 'text',
    'year': 'text',
    'record_id': 'text',
    'title': 'text',
    'classification': 'dropdown'
}

# The metadata_dropdown_values variable defines what values to display in the metadata dropdown. It defaults to an empty dict.
# If no value is provided for a metadata field which has an input type of dropdown, no value will be displayed. You should
# provide a list of strings with labels and values for metadata.
# ex: {"title": [{"label": "Contrat Social", "value": "Du Contrat Social"}, {"label": "Emile", "value": "Emile, ou de l'éducation"}]}
metadata_dropdown_values = {
    "classification": [
        {"label": "Diocesan", "value": "Diocesan"},
        {"label": "Liber Synodalis", "value": "Liber Synodalis"},
        {"label": "Compilation (Diocesan)", "value": "Compilation (Diocesan)"},
        {"label": "Provincial", "value": "Provincial"},
        {"label": "Compilation (Provincial)", "value": "Compilation (Provincial)"},
        {"label": "Legatine", "value": "Legatine"},
        {"label": "Abstract/Abbreviation", "value": "Abstract/Abbreviation"},
        {"label": "Other", "value": "Other"},
        {"label": "Unclear", "value": "Unclear"}
    ],
    "language": [
        {"label": "Latin", "value": "Latin"},
        {"label": "Italian", "value": "Italian"},
        {"label": "Middle Dutch", "value": "Middle Dutch"},
        {"label": "Old Catalan", "value": "Old Catalan"},
        {"label": "Old French", "value": "Old French"},
        {"label": "Old Norse", "value": "Old Norse"},
        {"label": "Old Portuguese", "value": "Old Portuguese"},
        {"label": "Old Spanish", "value": "Old Spanish"}
    ],
    "country": [
        {"label": "Austria", "value": "Austria"}, {"label": "Belgium", "value": "Belgium"}, {"label": "Croatia", "value": "Croatia"}, {"label": "Cyprus", "value": "Cyprus"}, {"label": "Czech Republic", "value": "Czech Republic"}, {"label": "Denmark", "value": "Denmark"}, {"label": "England", "value": "England"}, {"label": "Finland", "value": "Finland"}, {"label": "France", "value": "France"}, {"label": "Germany", "value": "Germany"}, {"label": "Hungary", "value": "Hungary"}, {"label": "Iceland", "value": "Iceland"}, {"label": "Ireland", "value": "Ireland"}, {"label": "Ireland (Northern)", "value": "Ireland (Northern)"}, {"label": "Israel", "value": "Israel"}, {"label": "Italy", "value": "Italy"}, {"label": "Lithuania", "value": "Lithuania"}, {"label": "Montenegro", "value": "Montenegro"}, {"label": "Netherlands", "value": "Netherlands"}, {"label": "Norway", "value": "Norway"}, {"label": "Poland", "value": "Poland"}, {"label": "Portugal", "value": "Portugal"}, {"label": "Scotland", "value": "Scotland"}, {"label": "Slovakia", "value": "Slovakia"}, {"label": "Slovenia", "value": "Slovenia"}, {"label": "Spain", "value": "Spain"}, {"label": "Sweden", "value": "Sweden"}, {"label": "Switzerland", "value": "Switzerland"}, {"label": "Wales", "value": "Wales"}
    ]
}

# The facets variable sets which metadata field can be used as a facet
# The object format is a list of metadata like the following: ['author', 'title', 'year'}
# The dict key should describe what the facets will do, and the dict value, which has to be a list,
# should list the metadata to be used for the frequency counts
facets = [
    'record_id',
    'create_date',
    'origPlace',
    'diocese',
    'province',
    'country',
    'classification',
    'language'
]

# The word_facets variable functions much like the facets variable, but describes metadata
# attached to word or phrases results and stored in the words table. Experimental.
words_facets = []

# The concordance_length variable sets the length in bytes of each concordance result
concordance_length = 300

# The search_examples variable defines which examples should be provided for each searchable field in the search form.
# If None is the value, or there are any missing examples, defaults will be generated at runtime by picking the first
# result for any given field. If you wish to change these default values, you should configure them here like so:
# search_examples = {"author": "Jean-Jacques Rousseau", "title": "Du contrat social"}
search_examples = {
    'province': u'Trier',
    'head': u'Metadata, Incipit, Explicit, Capitulum 1, Footnotes',
    'create_date': u'1192',
    'language': u'Latin',
    'diocese': u'Toul',
    'country': u'France',
    'origDate': u'1192',
    'filename': u'0217.xml',
    'origPlace': u'Toul',
    'year': u'1192  [or] 1250-1275 [or] 1300-',
    'record_id': u'0217'
}

# The stopwords variable defines a file path containing a list of words (one word per line) used for filtering out words
# in the collocation report. The file must be located in the defined path. If the file is not found,
# no option for using a stopword list will be displayed in collocation searches.
stopwords = ''

# The theme variable defines the default CSS theme to be used in the WebApp. The default theme called default_theme.css
# can be edited directly or you can define a new CSS file below. This file must be located in the app/assets/css/split/ directory for the Web App to find it.
theme = '/var/lib/philologic4/web_app/app/assets/css/split/default_theme.css'

# The dictionary variable enables a different search interface with the headword as its starting point. It is turned off by default
dictionary = False

# The dictionary_bibliography variable enables a different a bibliography report where entries are displayed
# in their entirety and grouped under the same title. It is turned off by default
dictionary_bibliography = False

# If set to True, this option creates a dropdown menu to select searching within only a single volume or title.
# This replaces the title field in the search form.
# You need to configure the dictionary_selection_options variable below to define your options.
dictionary_selection = False

# If dictionary_selection is set to True, you need to populate this variable as in the following:
# [{"label": "DAF 1932", "title": "Dictionnaire de l'Académie Française 1932"}]
# Each volume is represented as an object containing the label which is displayed in the search form
# and a title value which should either be the exact string stored in the SQL table, or an egrep expression
# such as "Dictionnaire de Littre.*" if you wish to match more than one title.
dictionary_selection_options = []

# The landing_page_browsing variable defines what type of landing page. There are 3 built-in reports available: 'default',
# 'dictionary' or 'simple'. You can otherwise supply a relative path to a custom HTML template. Note that this path is relative
# to the database root. The only constraint for custom templates is that the HTML must be encapsulated inside a div
landing_page_browsing = 'default'

# The landing_page_browsing variable allows for configuration of navigation by metadata within the landing page.
# You can choose any document-level metadata (such as author, title, date, genre...) for browsing
# and define two different types of queries to group your data: ranges and exact matches, i.e. "A-D" or "Comedy".
# You can define styling with a dictionary of valid CSS property/value such as those in the default values.
# begin and end keywords define what precedes and follows each field. You can use HTML for these strings.
default_landing_page_browsing = [
    {
        'citation': [
            {
                'style': {
                    'font-variant': 'small-caps'
                },
                'suffix': '',
                'object_level': 'doc',
                'field': 'origPlace',
                'prefix': '',
                'link': True,
                'separator': ','
            }
        ],
        'label': 'Place',
        'group_by_field': 'origPlace',
        'queries': [
            'A-D',
            'E-I',
            'J-M',
            'N-R',
            'S-Z'
        ],
        'display_count': True,
        'is_range': True
    },
    {
        'citation': [
            {
                'style': {
                    'font-variant': 'small-caps'
                },
                'suffix': ',&nbsp;',
                'object_level': 'doc',
                'field': 'author',
                'prefix': '',
                'link': False,
                'separator': ''
            },
            {
                'style': {
                    'font-weight': 700,
                    'font-style': 'italic',
                    'font-variant': 'small-caps'
                },
                'suffix': '',
                'object_level': 'doc',
                'field': 'title',
                'prefix': '',
                'link': True,
                'separator': '&gt;'
            },
            {
                'style': {},
                'suffix': ']',
                'object_level': 'doc',
                'field': 'origDate',
                'prefix': '&nbsp;&nbsp;[',
                'link': False,
                'separator': '&gt;'
            }
        ],
        'label': 'Year',
        'group_by_field': 'year',
        'queries': [
            '1100-1200',
            '1200-1300',
            '1300-1400',
            '1400-1500',
            '1500-1600'
        ],
        'display_count': False,
        'is_range': True
    }
]

# The default landing page display variable allows you to load content by default. It is configured
# in the same way as default_landing_page_display objects except that you need to define just one
# range (the one you wish to display) as a string, such as 'A-D'. An empty dict will disable the feature.
default_landing_page_display = {}

# This variable defines the citation for the simple landing page.
simple_landing_citation = [
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': ',&nbsp;',
        'object_level': 'doc',
        'field': 'author',
        'prefix': '',
        'link': False,
        'separator': ','
    },
    {
        'style': {
            'font-weight': 700,
            'font-style': 'italic',
            'font-variant': 'small-caps'
        },
        'suffix': '',
        'object_level': 'doc',
        'field': 'title',
        'prefix': '',
        'link': True,
        'separator': ','
    },
    {
        'style': {},
        'suffix': ']',
        'object_level': 'doc',
        'field': 'origDate',
        'prefix': '&nbsp;&nbsp;[',
        'link': False,
        'separator': ''
    },
    {
        'style': {},
        'suffix': ',&nbsp;',
        'object_level': 'doc',
        'field': 'pub_place',
        'prefix': '',
        'link': False,
        'separator': '&gt;'
    },
    {
        'style': {},
        'suffix': ',&nbsp;',
        'object_level': 'doc',
        'field': 'publisher',
        'prefix': '',
        'link': False,
        'separator': '&gt;'
    },
    {
        'style': {},
        'suffix': ',&nbsp;',
        'object_level': 'doc',
        'field': 'collection',
        'prefix': '',
        'link': False,
        'separator': '&gt;'
    }
]

# If landing_page_browsing is set to dictionary, the dico_letter_range variable allows you to define set of letters corresponding to the first letter of a headword. This generates a set of buttons
# for browsing the database available on the landing page. The default represents the entire roman alphabet. An empty list hides the table.
dico_letter_range = [
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z'
]

# The concordance_citation variable define how and in what field order citations are displayed in concordance reports.
# You can define styling with a dictionary of valid CSS property/value such as those in the default values.
# begin and end keywords define what precedes and follows each field. You can use HTML for these strings.
# The link key enables linking for that metadata field. It links to the table of contents for title and filename,
# and to a regular query for all other metadata fields.
concordance_citation = [
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '',
        'object_level': 'doc',
        'field': 'author',
        'prefix': '',
        'link': False,
        'separator': ','
    },
    {
        'style': {
            'font-weight': 700,
            'font-style': 'italic',
            'font-variant': 'small-caps'
        },
        'suffix': '',
        'object_level': 'doc',
        'field': 'title',
        'prefix': '',
        'link': True,
        'separator': ''
    },
    {
        'style': {},
        'suffix': ']',
        'object_level': 'doc',
        'field': 'origDate',
        'prefix': '&nbsp;&nbsp;[',
        'link': False,
        'separator': '&gt;'
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'div1',
        'field': 'head',
        'prefix': '&nbsp;&nbsp;&nbsp;&nbsp;',
        'link': True,
        'separator': '&gt;'
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'div2',
        'field': 'head',
        'prefix': '&nbsp;&nbsp;',
        'link': True,
        'separator': '&gt;'
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'div3',
        'field': 'head',
        'prefix': '&nbsp;&nbsp;',
        'link': True,
        'separator': '&gt;'
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'para',
        'field': 'who',
        'prefix': '&nbsp;&nbsp;',
        'link': True,
        'separator': ''
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'para',
        'field': 'resp',
        'prefix': '&nbsp;&nbsp;',
        'link': True,
        'separator': ''
    },
    {
        'style': {},
        'suffix': ']',
        'object_level': 'page',
        'field': 'n',
        'prefix': '&nbsp;[ page',
        'link': True,
        'separator': ''
    }
]

# The bibligraphy_citation variable define how and in what field order citations are displayed in bibliography reports.
# You can define styling with a dictionary of valid CSS property/value such as those in the default values.
# begin and end keywords define what precedes and follows each field. You can use HTML for these strings.
# The link key enables linking for that metadata field. It links to the table of contents for title and filename,
# and to a regular query for all other metadata fields.
bibliography_citation = [
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '',
        'object_level': 'doc',
        'field': 'author',
        'prefix': '',
        'link': False,
        'separator': ','
    },
    {
        'style': {
            'font-weight': 700,
            'font-style': 'italic',
            'font-variant': 'small-caps'
        },
        'suffix': '',
        'object_level': 'doc',
        'field': 'title',
        'prefix': '',
        'link': True,
        'separator': ''
    },
    {
        'style': {},
        'suffix': ']',
        'object_level': 'doc',
        'field': 'origDate',
        'prefix': '&nbsp;&nbsp;[',
        'link': False,
        'separator': '&gt;'
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'div1',
        'field': 'head',
        'prefix': '&nbsp;&nbsp;&nbsp;&nbsp;',
        'link': True,
        'separator': '&gt;'
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'div2',
        'field': 'head',
        'prefix': '&nbsp;&nbsp;',
        'link': True,
        'separator': '&gt;'
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'div3',
        'field': 'head',
        'prefix': '&nbsp;&nbsp;',
        'link': True,
        'separator': '&gt;'
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'para',
        'field': 'who',
        'prefix': '&nbsp;&nbsp;',
        'link': True,
        'separator': ''
    },
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '&nbsp;&nbsp;',
        'object_level': 'para',
        'field': 'resp',
        'prefix': '&nbsp;&nbsp;',
        'link': True,
        'separator': ''
    }
]

# The navigation_citation variable define how and in what field order citations are displayed in navigation reports.
# You can define styling with a dictionary of valid CSS property/value such as those in the default values.
# begin and end keywords define what precedes and follows each field. You can use HTML for these strings.
# The link key enables linking for that metadata field. It links to the table of contents for title and filename,
# and to a metadata query for all other metadata fields.
navigation_citation = [
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '',
        'object_level': 'doc',
        'field': 'author',
        'prefix': '',
        'link': False,
        'separator': ''
    },
    {
        'style': {
            'font-weight': 700,
            'font-style': 'italic',
            'font-variant': 'small-caps'
        },
        'suffix': '',
        'object_level': 'doc',
        'field': 'title',
        'prefix': '',
        'link': True,
        'separator': ''
    },
    {
        'style': {},
        'suffix': ']',
        'object_level': 'doc',
        'field': 'origDate',
        'prefix': '&nbsp;&nbsp;[',
        'link': False,
        'separator': ''
    },
    {
        'style': {},
        'suffix': '',
        'object_level': 'doc',
        'field': 'pub_place',
        'prefix': '',
        'link': False,
        'separator': '<br>'
    },
    {
        'style': {},
        'suffix': '',
        'object_level': 'doc',
        'field': 'publisher',
        'prefix': '',
        'link': False,
        'separator': ','
    },
    {
        'style': {},
        'suffix': '',
        'object_level': 'doc',
        'field': 'collection',
        'prefix': '',
        'link': False,
        'separator': ''
    }
]

# The table_of_contents_citation variable define how and in what field order citations are displayed in navigation reports.
# You can define styling with a dictionary of valid CSS property/value such as those in the default values.
# begin and end keywords define what precedes and follows each field. You can use HTML for these strings.
# The link key enables linking for that metadata field. It links to the table of contents for title and filename,
# and to a metadata query for all other metadata fields.
table_of_contents_citation = [
    {
        'style': {
            'font-variant': 'small-caps'
        },
        'suffix': '',
        'object_level': 'doc',
        'field': 'author',
        'prefix': '',
        'link': False,
        'separator': ''
    },
    {
        'style': {
            'font-weight': 700,
            'font-style': 'italic',
            'font-variant': 'small-caps'
        },
        'suffix': '',
        'object_level': 'doc',
        'field': 'title',
        'prefix': '',
        'link': True,
        'separator': ''
    },
    {
        'style': {},
        'suffix': ']',
        'object_level': 'doc',
        'field': 'origDate',
        'prefix': '&nbsp;&nbsp;[',
        'link': False,
        'separator': ''
    },
    {
        'style': {},
        'suffix': '',
        'object_level': 'doc',
        'field': 'pub_place',
        'prefix': '',
        'link': False,
        'separator': '<br>'
    },
    {
        'style': {},
        'suffix': '',
        'object_level': 'doc',
        'field': 'publisher',
        'prefix': '',
        'link': False,
        'separator': ','
    },
    {
        'style': {},
        'suffix': '',
        'object_level': 'doc',
        'field': 'collection',
        'prefix': '',
        'link': False,
        'separator': ''
    }
]

# The kwic_bibliography_fields variable  defines which bibliography fields will be displayed in the KWIC view. It should be
# modified with extra care in conjunction with the concordance_citation function located in reports/concordance.py.
# If the variable is an empty list, filename will be used.
kwic_bibliography_fields = [
    'title'
]

# The concordance_biblio_sorting variable allows you to pick wich metadata field can be used for sorting concordance or bibliography results.
# It is a list of tuples where multiple metadata fields can be used for sorting, such as [('author', 'title'), ('year', 'author', 'title')].
# Note that these fields must belong to the same object type, such as "doc" or "div".
concordance_biblio_sorting = [('record_id'), ('title'), ('year'), ('classification'), ('origPlace'), ('diocese'), ('province'), ('country'), ('year', 'origPlace', 'classification')]

# The kwic_metadata_sorting_fields variable allows you to pick wich metadata field can be used for sorting KWIC results.
kwic_metadata_sorting_fields = [
    'title'
]

# The time_series_year_field variable defines which metadata field to use for time series. The year field is built at load time by finding the earliest 4 digit number
# in multiple date fields.
time_series_year_field = 'year'

# The time_series_interval variable defines the default year span used for time series.
time_series_interval = 10

# This defines whether the page images should be viewed in a non-PhiloLogic instance
external_page_images = False

# The page_images_url_root variable defines a root URL where pages images can be fetched when a filename is provided inside a page tag.
# Note that the page image filename must be inside a fac or id attribute such as:
# <pb fac="filename.jpg"> or <pb id="filename.jpg">
# So a URL of http://my-server.com/images/ will resolve to http://my-server.com/images/filename.jpg.
page_images_url_root = ''


# The page_image_extension value is useful when the image name does not have an extension defined in the markup.
# For instance, given <pb n="1" fac="image1">, you could define the extension as ".jpeg" and the browser would fetch
# the image at http://some-url/image1.jpeg (where some-url is defined in the above page_images_url_root variable).
page_image_extension = ''

# The logo variable defines the location of an image to display on the landing page, just below the
# search form. It can be a relative URL, or an absolute link, in which case you want to make sure
# it starts with http://. If no logo is defined, no picture will be displayed.
logo = ''

# The header_in_toc variable defines whether to display a button to show the header in the table of contents
header_in_toc = False

# You can define a custom HTML template for the search syntax pop-up window, in which case you need to supply the
# relative path to the template. Note that this path is relative to the database root. The only constraint
# for custom templates is that the HTML must be encapsulated inside a div
search_syntax_template = 'default'

# A list of pattern with replacement to be run on individual concordances before sending to browser
# It is constructed as a list of tuples where the first element is the pattern to be matched
# and the second element is the replacement
# e.g.: [("<note>", "<span>"), ("</note>", "</span>")]
concordance_formatting_regex = []

# A list of pattern with replacement to be run on individual kwic concordances before sending to browser
# It is constructed as a list of tuples where the first element is the pattern to be matched
# and the second element is the replacement
# e.g.: [("<note>", "<span>"), ("</note>", "</span>")]
kwic_formatting_regex = []

# A list of pattern with replacement to be run on text objects before sending to browser
# It is constructed as a list of tuples where the first element is the pattern to be matched
# and the second element is the replacement
# e.g.: [("<note>", "<span>"), ("</note>", "</span>")]
navigation_formatting_regex = []

# A list of pattern with replacement to be run on all incoming queries
# It is constructed as a list of tuples where the first element is the regex pattern to be matched
# and the second element is the replacement
# e.g.: [(" OR ", " | "), ("-", " ")]
query_parser_regex = [
    (
        ' OR ',
        ' | '
    ),
    (
        "'",
        ' '
    ),
    (
        ';',
        ''
    ),
    (
        ',',
        ''
    ),
    (
        '!',
        ''
    ),
    (
        '\xe3\x80\x80',
        ' '
    ),
    (
        '\xef\xbd\x9c',
        '|'
    ),
    (
        '\xe2\x80\x9d',
        '"'
    ),
    (
        '\xef\xbc\x8d',
        '-'
    ),
    (
        '\xef\xbc\x8a',
        '*'
    )
]

# Dictionary lookup function. You select a word in running text and hit D, and it'll query an external dictionary
# and return definitions. This is currently hardcoded to ARTFL's dictionary model. To be made more generic at a later date
dictionary_lookup = ''

# The link should start with http:// or https://. This will display an error report link in the header and in document navigation
report_error_link = 'https://docs.google.com/forms/d/e/1FAIpQLScA3teY-_0_JvCfkg_VrUBH2tBzWFqiaAGG3QtQx7PmnCFwAA/viewform'
